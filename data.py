# coding=utf-8
from collections import namedtuple
from struct import Struct


HEADER_DATA_FORMAT = (
    '4s'    # сигнатура файла TMB1
    'I'     # Количество каналов: 4 байта, целое (Количество каналов по которым принимался сигнал)
    'I'     # Размер выборки на один канал: 4 байта, целое (число дискретных точек на один временной интервал приема данных (блок даных) N)
    'I'     # Количество спектральных линий: 4 байта, целое (меньше или равно N/2)
    'I'     # Частота среза: 4 байта, целое  (заданная частота среза ФНЧ при приеме данных)
    'f'     # Частотное разрешение: 4 байта, вещественное (шаг по частоте между спектральными линиями при анализе, Гц )
    'f'     # Время приёма блока данных: 4 байта, вещественное (время за которое принимался  блок данных, величина обратная частотному разрешению)
    'I'     # Общее время приёма данных: 4 байта, целое  (время приема всей реализации в секундах)
    'I'     # Количество принятых блоков (задано пользователем): 4 байта, целое (то что было задано пользователем при приеме данных)
    'I'     # размер данных: 4 байта, целое (количество дискретных отсчетов в файле даных)
    'I'     # число принятых блоков(принято системой): 4 байта, целое (реально принятое число блоков)
    'f'     # максимальное значение принятых данных: 4 байта, вещественное (максимальное значение  сигнала)
    'f'     # минимальное значение принятых данных: 4 байта, вещественное (минимальное значение  сигнала)
            # далее идут данные в формате 4 байта, вещественное число для одного дискретного значения сигнала.
)


SignalHeader = namedtuple('SignalHeader', (
    'signature',
    'channel_count',
    'fetch_size_per_channel',
    'spectral_lines_count',
    'slice_freq',
    'freq_dimension',
    'rcv_time',
    'total_rcv_time',
    'blocks_count',
    'data_size',
    'system_rcved_blocks',
    'max_value',
    'min_value',
))


class SignalDate(object):
    def __init__(self, file_name):
        with open(file_name, 'rb') as f:
            self.data = f.read()

        header = Struct(HEADER_DATA_FORMAT)
        self.header = SignalHeader(*header.unpack(self.data[:header.size]))